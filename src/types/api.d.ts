/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/products': {
    /**
     * Get products
     * @description Retrieves a list of all products
     */
    get: operations['getProducts'];
  };
  '/products/{productUuid}': {
    /**
     * Get a product
     * @description Retrieves a specific product by its UUID.
     * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
     */
    get: operations['getProductByUuid'];
  };
  '/products/{productUuid}/plans': {
    /**
     * Get all plans of a product
     * @description Retrieves all the plans associated with a specific product.
     * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
     */
    get: operations['getProductPlans'];
  };
  '/products/{productUuid}/pricingtable': {
    /**
     * Get product pricing table
     * @description Retrieves the pricing table of a specific product.
     * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
     */
    get: operations['getProductPricingTable'];
  };
  '/products/{productUuid}/features': {
    /**
     * Get product features
     * @description Retrieve the list of features for a product
     */
    get: operations['getProductFeatures'];
  };
  '/products/{productUuid}/currencies': {
    /**
     * Get product currencies
     * @description Retrieve the list of currencies for a product
     */
    get: operations['getProductCurrencies'];
  };
  '/products/{productUuid}/capabilities': {
    /**
     * Get product capabilities
     * @description Retrieve the list of capabilities for a product
     */
    get: operations['getProductCapabilities'];
  };
  '/plans/{planUuid}': {
    /**
     * Get a plan
     * @description Retrieves information about a plan by its UUID.
     * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
     */
    get: operations['getPlanByUuid'];
  };
  '/plans/{planUuid}/features': {
    /**
     * Get plan features
     * @description Retrieve the list of features for a specific plan
     */
    get: operations['getPlanFeatures'];
  };
  '/plans/{planUuid}/currencies': {
    /**
     * Get plan currencies
     * @description Retrieve the list of currencies for a specific plan
     */
    get: operations['getPlanCurrencies'];
  };
  '/plans/{planUuid}/checkoutlink': {
    /**
     * Get a checkout link for a plan
     * @description Retrieves a checkout link for a specific plan. The checkout link can be used by customers to purchase the plan.
     */
    get: operations['getPlanCheckoutLink'];
  };
  '/plans/{planUuid}/capabilities': {
    /**
     * Get plan capabilities
     * @description Retrieve the list of capabilities for a specific plan
     */
    get: operations['getPlanCapabilities'];
  };
  '/licenses': {
    /**
     * Get licenses
     * @description Retrieves a list of all licenses.
     */
    get: operations['getLicenses'];
    /**
     * Batch update licenses
     * @description Performs a batch update of licenses.
     */
    put: operations['updateLicenses'];
    /**
     * Create a license
     * @description Create one or many ad hoc Licenses to give the specified granteeIds access to features.
     */
    post: operations['createLicense'];
  };
  '/licenses/count': {
    /**
     * Get the count of licenses
     * @description Returns the count of all licenses including counts for assigned and unassigned licenses.
     */
    get: operations['getLicensesCount'];
  };
  '/licenses/{licenseUuid}': {
    /**
     * Get a License
     * @description Fetch the details of a specific license using its UUID. If additional specific details are required, use the optional 'expand' query parameter to include relational data such as associated subscription details, pricing plans, product details, etc.
     */
    get: operations['getLicenseByUuid'];
    /**
     * Update a license
     * @description Set or unset the granteeId of a license.
     */
    put: operations['updateLicense'];
    /**
     * Cancel an ad hoc License
     * @description Cancel an ad hoc license, this will set the status to `CANCELED`
     *
     * Does not cancel subscription, only use for canceling ad hoc licenses.
     */
    delete: operations['cancelLicense'];
  };
  '/licenses/check': {
    /**
     * Check a grantee(s) licenses
     * @description Retrieves the flags the grantee(s) have access to.
     */
    get: operations['getLicenseCheck'];
  };
  '/licenses/purchaser': {
    /**
     * Get licenses by purchaser
     * @description Retrieves an array of licenses for a purchaser
     */
    get: operations['getLicensesByPurchaser'];
  };
  '/licenses/granteeId/{granteeId}': {
    /**
     * Get licenses by granteeId
     * @description Retrieves a list of licenses for a grantee
     */
    get: operations['getLicensesByGranteeId'];
  };
  '/licenses/{licenseUuid}/usage': {
    /**
     * Get usage details of a license
     * @description Retrieves the feature usage details for a metered license.
     */
    get: operations['getLicenseUsage'];
  };
  '/licenses/cancel': {
    /**
     * Cancel many ad hoc licenses
     * @description Cancels ad hoc Licenses with using an array of licenseUuids.
     *
     * Does not cancel subscription, only use for canceling ad hoc licenses.
     */
    post: operations['cancelLicenses'];
  };
  '/subscriptions/{subscriptionUuid}': {
    /**
     * Get a subscription
     * @description Retrieves the subscription data based on the UUID.
     * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
     */
    get: operations['getSubscriptionByUuid'];
  };
  '/subscriptions/{subscriptionUuid}/invoices': {
    /**
     * Get subscription invoices
     * @description Retrieves a list of invoices for a subscription
     */
    get: operations['getSubscriptionInvoices'];
  };
  '/subscriptions/{subscriptionUuid}/updateplan/listplans': {
    /**
     * Get plans that a subscribed user can switch to
     * @description Retrieves a list of available plans that a subscribed user can switch to
     */
    get: operations['getSubscriptionUpdatablePlans'];
  };
  '/subscriptions/{subscriptionUuid}/cancel': {
    /**
     * Cancel a subscription
     * @description Cancels a subscription by providing the `subscriptionUuid`
     * It will cancel immediately or at the end of the Subscription based on value of the `when` query parameter.
     */
    put: operations['cancelSubscription'];
  };
  '/subscriptions/{subscriptionUuid}/updatepaymentlink': {
    /**
     * Get an update payment link
     * @description Retrieves the update payment link for a specific subscription.
     * The link opens up a management portal for your payment integration that will have an option for the customer to update their payment details.
     */
    get: operations['getSubscriptionUpdatePaymentLink'];
  };
  '/subscriptions/{subscriptionUuid}/customer-portal': {
    /**
     * Get a customer portal link
     * @description Retrieves the customer portal link for a subscription.
     * The link opens up a subscription management portal for your payment integration that will have an options for the customer to manage their subscription.
     */
    get: operations['getSubscriptionCustomerPortalLink'];
  };
  '/subscriptions/{subscriptionUuid}/cancelpaymentlink': {
    /**
     * Get a cancel subscription link
     * @description Retrieves the cancel subscription link for a specific subscription.
     * The link opens up a subscription management portal for your payment integration that will have an option for the customer to cancel the subscription.
     */
    get: operations['getSubscriptionCancelLink'];
  };
  '/subscriptions/{subscriptionUuid}/payment-method': {
    /**
     * Get payment method
     * @description Retrieves the payment method used to pay for a subscription.
     */
    get: operations['getSubscriptionPaymentMethod'];
  };
  '/subscriptions/{subscriptionUuid}/reactivate': {
    /**
     * Reactivate a Subscription
     * @description Reactivate a Subscription's scheduled cancellation before the billing period has passed. If the billing period has passed and the Subscription has already been canceled please create a new Subscription.
     */
    put: operations['getSubscriptionReactivate'];
  };
  '/subscriptions/{subscriptionUuid}/updateplan/{planUuid}': {
    /**
     * Move a Subscription to another Plan
     * @description Moves a subscription to a different plan. Allows users to change the plan for a subscription.
     */
    put: operations['updateSubscriptionPlan'];
  };
  '/subscriptions/{subscriptionUuid}/seats': {
    /**
     * Decrement quantity of seats on a subscription.
     * @description Decrementing will only remove unassigned licenses.
     */
    put: operations['decrementSubscriptionSeats'];
    /**
     * Increment quantity of seats on a subscription.
     * @description Incrementing will create unassigned licenses.
     */
    post: operations['incrementSubscriptionSeats'];
  };
  '/usage': {
    /**
     * Updates a license's usage
     * @description Updates the usage feature of a license by incrementing its value.
     */
    put: operations['updateLicenseUsage'];
  };
  '/pricing-tables/{pricingTableUuid}': {
    /**
     * Get a pricing table
     * @description Retrieves a pricing table by its UUID. This returns all necessary data on a Pricing Table to be able to display it.
     */
    get: operations['getPricingTableByUuid'];
  };
  '/rbac/permissions': {
    /**
     * Get list of permissions
     * @description Retrieves the list of RBAC permissions
     */
    get: operations['getPermissions'];
    /**
     * Create new RBAC permission
     * @description Creates a new RBAC permission that can be assigned to a user or role
     */
    post: operations['createPermission'];
  };
  '/rbac/permissions/{permissionUuid}': {
    /**
     * Get permission by UUID
     * @description Retrieves the RBAC permission with the specified UUID.
     */
    get: operations['getPermissionByUuid'];
    /**
     * Update permission by UUID
     * @description Updates the RBAC permission with the specified UUID.
     */
    put: operations['updatePermission'];
    /**
     * Delete permission by UUID
     * @description Deletes the RBAC permission with the specified UUID.
     */
    delete: operations['deletePermission'];
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC permission. */
        permissionUuid: string;
      };
    };
  };
  '/rbac/roles': {
    /**
     * Get list of roles
     * @description Retrieves the list of RBAC roles
     */
    get: operations['getRoles'];
    /**
     * Create new role
     * @description Creates a new RBAC role that can be assigned to a user
     */
    post: operations['createRole'];
  };
  '/rbac/roles/{roleUuid}': {
    /**
     * Get role by UUID
     * @description Retrieves the RBAC role by its UUID.
     */
    get: operations['getRoleByUuid'];
    /**
     * Update role by UUID
     * @description Updates the RBAC role by its UUID.
     */
    put: operations['updateRole'];
    /**
     * Delete role by UUID
     * @description Deletes the RBAC role by its UUID.
     */
    delete: operations['deleteRole'];
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC role. */
        roleUuid: string;
      };
    };
  };
  '/rbac/users': {
    /**
     * Get list of users
     * @description Retrieves a list of all users
     */
    get: operations['getUsers'];
    /**
     * Create new user
     * @description Creates a new user with the provided data
     */
    post: operations['createUser'];
  };
  '/rbac/users/{userUuid}': {
    /**
     * Get user by UUID
     * @description Retrieves the RBAC Users with the specified UUID.
     */
    get: operations['getUserByUuid'];
    /**
     * Update user by UUID
     * @description Updates the RBAC Users with the specified UUID.
     */
    put: operations['updateUser'];
    /**
     * Delete user by UUID
     * @description Deletes the RBAC Users with the specified UUID.
     */
    delete: operations['deleteUser'];
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC user. */
        userUuid: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Product: {
      /** Format: uuid */
      uuid?: string;
      name?: string;
      description?: string | null;
      logoUrl?: string | null;
      displayName?: string | null;
      organisation?: string;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?: 'ACTIVE' | 'DEPRECATED';
      paid?: boolean;
      /** Format: uuid */
      organisationPaymentIntegrationUuid?: string;
      paymentIntegrationProductId?: string | null;
      appType?: string;
      /** Format: date-time */
      updatedAt?: string;
      isTest?: boolean;
    };
    Plan: {
      /** Format: uuid */
      uuid?: string;
      name?: string;
      description?: string | null;
      displayName?: string;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?:
        | 'ACTIVE'
        | 'DEPRECATED'
        | 'DRAFT'
        | 'REVISION'
        | 'SCHEDULED'
        | 'COMING_SOON';
      isTest?: boolean;
      trialDays?: number | null;
      evaluation?: boolean;
      evalDays?: number;
      organisation?: string;
      visibility?: string;
      licenseType?: string;
      perSeatAmount?: number;
      interval?: string;
      length?: number;
      active?: boolean;
      planType?: string;
      pricingType?: string;
      environment?: string;
      paddlePlanId?: string | null;
      /** Format: uuid */
      productUuid?: string;
      salablePlan?: boolean;
      /** Format: date-time */
      updatedAt?: string;
    };
    Capability: {
      /** Format: uuid */
      uuid?: string;
      name?: string;
      description?: string | null;
      /** @enum {string} */
      status?: 'ACTIVE' | 'DEPRECATED';
      /** Format: uuid */
      productUuid?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Feature: {
      /** Format: uuid */
      uuid?: string;
      name?: string;
      description?: string | null;
      displayName?: string;
      variableName?: string | null;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?: 'ACTIVE' | 'DEPRECATED';
      visibility?: string;
      valueType?: string;
      defaultValue?: string;
      showUnlimited?: boolean;
      /** Format: uuid */
      productUuid?: string;
      /** Format: date-time */
      updatedAt?: string;
      sortOrder?: number;
    };
    OrganisationPaymentIntegration: {
      /** Format: uuid */
      uuid?: string;
      organisation?: string;
      integrationName?: string;
      accountName?: string;
      accountData?: Record<string, never>;
      accountId?: string | null;
      /** Format: date-time */
      updatedAt?: string;
      isTest?: boolean;
    };
    Currency: {
      /** Format: uuid */
      uuid?: string;
      /** @example USD */
      shortName?: string;
      /** @example United States Dollar */
      longName?: string;
      /** @example $ */
      symbol?: string;
    };
    ProductPricingTable: {
      /** Format: uuid */
      uuid?: string;
      name?: string;
      description?: string | null;
      logoUrl?: string | null;
      displayName?: string | null;
      organisation?: string;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?: 'ACTIVE' | 'DEPRECATED';
      paid?: boolean;
      /** Format: uuid */
      organisationPaymentIntegrationUuid?: string;
      paymentIntegrationProductId?: string | null;
      appType?: string;
      /** Format: date-time */
      updatedAt?: string;
      isTest?: boolean;
      features?: components['schemas']['Feature'][];
      organisationPaymentIntegration?: components['schemas']['OrganisationPaymentIntegration'];
      currencies?: {
        /** Format: uuid */
        productUuid?: string;
        /** Format: uuid */
        currencyUuid?: string;
        /** @example true */
        defaultCurrency?: boolean;
        currency?: components['schemas']['Currency'];
      }[];
      plans?: components['schemas']['PricingTablePlan'][];
    };
    PricingTablePlan: {
      /** Format: uuid */
      uuid?: string;
      name?: string;
      description?: string;
      displayName?: string;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?: 'ACTIVE' | 'DEPRECATED';
      isTest?: boolean;
      trialDays?: number;
      evaluation?: boolean;
      evalDays?: number;
      organisation?: string;
      visibility?: string;
      licenseType?: string;
      perSeatAmount?: number;
      interval?: string;
      length?: number;
      active?: boolean;
      planType?: string;
      pricingType?: string;
      environment?: string;
      paddlePlanId?: string | null;
      /** Format: uuid */
      productUuid?: string;
      salablePlan?: boolean;
      /** Format: date-time */
      updatedAt?: string;
      currencies?: components['schemas']['Currency'][];
      features?: components['schemas']['Feature'][];
    };
    Subscription: {
      /** Format: uuid */
      uuid?: string;
      /** Format: uuid */
      productUuid?: string;
      /** Format: uuid */
      planUuid?: string;
      organisation?: string;
      paymentIntegrationSubscriptionId?: string;
      /** @enum {string} */
      type?: 'salable' | 'stripe_existing' | 'stripe' | 'paddle';
      quantity?: number;
      /** Format: email */
      email?: string | null;
      /** Format: date-time */
      expiryDate?: string;
      lineItemIds?: string[] | null;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?:
        | 'ACTIVE'
        | 'CANCELED'
        | 'PAUSED'
        | 'TRIALING'
        | 'DELETED'
        | 'PAST_DUE'
        | 'INCOMPLETE_EXPIRED'
        | 'INCOMPLETE'
        | 'UNPAID';
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      isTest?: boolean;
    };
    /**
     * @example {
     *   "planUuid": "2fbdf7df-cb91-4104-ab75-de2db68db742",
     *   "member": "memberId_123456",
     *   "granteeId": "userId_123456"
     * }
     */
    LicenseCreateRequest: {
      /**
       * Format: uuid
       * @description The UUID of the plan associated with the license.
       * The `planUuid` can be found on the Plan view in the Salable dashboard.
       */
      planUuid: string;
      /** @description The ID of the member who will manage the license. */
      member: string;
      /** @description The grantee ID for the license. */
      granteeId: string | null;
    };
    /**
     * @example [
     *   {
     *     "planUuid": "2fbdf7df-cb91-4104-ab75-de2db68db742",
     *     "member": "memberId_123456",
     *     "granteeId": "userId_123456"
     *   },
     *   {
     *     "planUuid": "1abdc7df-ef34-4256-bf75-aa3dfgdb7123",
     *     "member": "memberId_789101",
     *     "granteeId": null
     *   }
     * ]
     */
    CreateManyLicensesRequest: components['schemas']['LicenseCreateRequest'][];
    /**
     * @example {
     *   "planUuid": "2fbdf7df-cb91-4104-ab75-de2db68db742",
     *   "member": "memberId_123456",
     *   "granteeId": "userId_123456"
     * }
     */
    LicenseCreateManyRequest: {
      /**
       * Format: uuid
       * @description The UUID of the plan associated with the license.
       * The `planUuid` can be found on the Plan view in the Salable dashboard.
       */
      planUuid: string;
      /** @description The ID of the member who will manage the license. */
      member: string;
      /** @description The grantee ID for the license. */
      granteeId: string;
    };
    License: {
      /** Format: uuid */
      uuid?: string;
      /** Format: uuid */
      productUuid?: string;
      /** Format: uuid */
      planUuid?: string;
      /** Format: uuid */
      subscriptionUuid?: string;
      granteeId?: string | null;
      purchaser?: string;
      email?: string | null;
      name?: string | null;
      paymentService?: string;
      type?: string;
      capabilities?: components['schemas']['Capability'][];
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?:
        | 'ACTIVE'
        | 'CANCELED'
        | 'EVALUATION'
        | 'SCHEDULED'
        | 'TRIALING'
        | 'INACTIVE';
      metadata?: string;
      /** Format: date-time */
      updatedAt?: string;
      isTest?: boolean;
    };
    LicenseCount: {
      /** @description Total count of licenses. */
      count?: number;
      /** @description Count of assigned licenses. */
      assigned?: number;
      /** @description Count of unassigned licenses. */
      unassigned?: number;
    };
    LicenseByPurchaser: {
      /** Format: uuid */
      uuid?: string;
      name?: string | null;
      /** Format: email */
      email?: string | null;
      /** Format: uuid */
      subscriptionUuid?: string;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?:
        | 'ACTIVE'
        | 'CANCELED'
        | 'EVALUATION'
        | 'SCHEDULED'
        | 'TRIALING'
        | 'INACTIVE';
      granteeId?: string;
      paymentService?: string;
      /** Format: email */
      purchaser?: string;
      type?: string;
      /** Format: uuid */
      productUuid?: string;
      /** Format: uuid */
      planUuid?: string;
      capabilities?: components['schemas']['Capability'][];
      metadata?: string | null;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      /** Format: date-time */
      updatedAt?: string;
      isTest?: boolean;
      product?: components['schemas']['Product'];
      plan?: components['schemas']['Plan'];
      subscription?: components['schemas']['Subscription'];
    };
    LicenseCheck: {
      /**
       * @description List of capabilities
       * @example [
       *   "test_capability"
       * ]
       */
      capabilities?: string[];
      /**
       * @description Public hash
       * @example 04b856e9a6ddd762138c52b6edbca5ac5b4be5ae7053f519d804e667adc11992372abd5db91cb0289985cebab1f8b5de9541b8a1a97202240f7a317d4a9f78d299
       */
      publicHash?: string;
      /**
       * @description Signature
       * @example 3044022004f243b5bb524689498537ff6bf865d847b8f6c6f65db687036814281fe4c1cc022043e645238050c587b6a79343a4acad58a925d3fbf3ba914d2f4c38a1f8439993
       */
      signature?: string;
      /**
       * @description Hashed capabilities
       * @example test_capability
       */
      capsHashed?: string;
      /**
       * Format: date-time
       * @description End dates of the capabilities
       * @example {
       *   "test_capability": "2023-11-03T12:47:02.021Z"
       * }
       */
      capabilitiesEndDates?: {
        [key: string]: string;
      };
    };
    LicenseUsage: {
      /** Format: uuid */
      licenseUuid?: string;
      /** Format: uuid */
      featureUuid?: string;
      /** Format: uuid */
      planUuid?: string;
      /** @example 0 */
      unitCount?: number;
    };
    PlanFeature: {
      /** Format: uuid */
      planUuid?: string;
      /** Format: uuid */
      featureUuid?: string;
      /** @example -1 */
      value?: string;
      /** Format: uuid */
      enumValueUuid?: string | null;
      /** @example true */
      isUnlimited?: boolean;
      /** @example false */
      isUsage?: boolean;
      pricePerUnit?: number | null;
      minUsage?: number | null;
      maxUsage?: number | null;
      /**
       * Format: date-time
       * @example 2023-02-07T14:44:37.433Z
       */
      updatedAt?: string;
      feature?: components['schemas']['Feature'];
      enumValue?: string | null;
    };
    PlanCurrency: {
      /** Format: uuid */
      planUuid?: string;
      /** Format: uuid */
      currencyUuid?: string;
      /** @example 1000 */
      price?: number;
      /** @example plan_NJVQSbjdHWJUSC */
      paymentIntegrationPlanId?: string;
      currency?: components['schemas']['Currency'];
    };
    PlanCapability: {
      /** Format: uuid */
      planUuid?: string;
      /** Format: uuid */
      capabilityUuid?: string;
      /**
       * Format: date-time
       * @example 2023-02-07T14:44:37.433Z
       */
      updatedAt?: string;
      capability?: components['schemas']['Capability'];
    };
    StripeInvoice: {
      /** @example in_xxxx */
      first?: string;
      /** @example in_xoxo */
      last?: string;
      data?: {
        /** @example in_xxxx */
        id?: string;
        /** @example invoice */
        object?: string;
        /** @example GB */
        account_country?: string;
        /** @example salable.app */
        account_name?: string;
        /** Format: nullable */
        account_tax_ids?: string;
        /**
         * Format: int32
         * @example 0
         */
        amount_due?: number;
        /**
         * Format: int32
         * @example 0
         */
        amount_paid?: number;
        /**
         * Format: int32
         * @example 0
         */
        amount_remaining?: number;
        /**
         * Format: int32
         * @example 0
         */
        amount_shipping?: number;
        /** @example ca_xxxx */
        application?: string;
        /** Format: nullable */
        application_fee_amount?: string;
        /**
         * Format: int32
         * @example 0
         */
        attempt_count?: number;
        /** @example true */
        attempted?: boolean;
        /** @example false */
        auto_advance?: boolean;
        automatic_tax?: {
          /** @example false */
          enabled?: boolean;
          /** Format: nullable */
          status?: string;
        };
        /** @example subscription_cycle */
        billing_reason?: string;
        /** Format: nullable */
        charge?: string;
        /** @example charge_automatically */
        collection_method?: string;
        /**
         * Format: int32
         * @example 1694521666
         */
        created?: number;
        /** @example usd */
        currency?: string;
        /** Format: nullable */
        custom_fields?: string;
        /** @example cus_NlwjXMq7KBOOR2 */
        customer?: string;
        customer_address?: {
          /** Format: nullable */
          city?: string;
          /** @example GB */
          country?: string;
          /** Format: nullable */
          line1?: string;
          /** Format: nullable */
          line2?: string;
          /** @example NR13 6UN */
          postal_code?: string;
          /** Format: nullable */
          state?: string;
        };
        /** @example customer@company.com */
        customer_email?: string;
        /** @example A NAME */
        customer_name?: string;
        /** Format: nullable */
        customer_phone?: string;
        /** Format: nullable */
        customer_shipping?: string;
        /** @example none */
        customer_tax_exempt?: string;
        customer_tax_ids?: string[];
        /** Format: nullable */
        default_payment_method?: string;
        /** Format: nullable */
        default_source?: string;
        default_tax_rates?: string[];
        /** Format: nullable */
        description?: string;
        /** Format: nullable */
        discount?: string;
        discounts?: string[];
        /** Format: nullable */
        due_date?: string;
        /**
         * Format: int32
         * @example 1694525662
         */
        effective_at?: number;
        /**
         * Format: int32
         * @example -11
         */
        ending_balance?: number;
        /** Format: nullable */
        footer?: string;
        /** Format: nullable */
        from_invoice?: string;
        /** @example https://invoice.stripe.com/i/acct_1MopGcQQTaDeHd2t/live_YWNjdF8xTW9wR2NRUVRhRGVIZDJ0LF9PY2xEM2tYSWVGYnhhbGI3YlRabzRyYXBJZDF1RTE0LDg3MDM4MDY00200n3ctI3Pm?s=ap */
        hosted_invoice_url?: string;
        /** @example https://pay.stripe.com/invoice/acct_1MopGcQQTaDeHd2t/live_YWNjdF8xTW9wR2NRUVRhRGVIZDJ0LF9PY2xEM2tYSWVGYnhhbGI3YlRabzRyYXBJZDF1RTE0LDg3MDM4MDY00200n3ctI3Pm/pdf?s=ap */
        invoice_pdf?: string;
        /** Format: nullable */
        last_finalization_error?: string;
        /** Format: nullable */
        latest_revision?: string;
        lines?: {
          /** @example list */
          object?: string;
          data?: {
            /** @example il_1NpVh0QQTaDeHd2tKCrxg01G */
            id?: string;
            /** @example line_item */
            object?: string;
            /**
             * Format: int32
             * @example -61
             */
            amount?: number;
            /**
             * Format: int32
             * @example -61
             */
            amount_excluding_tax?: number;
            /** @example usd */
            currency?: string;
            /** @example Unused time on Warm up calculator 2 after 12 Sep 2023 */
            description?: string;
            discount_amounts?: string[];
            /** @example false */
            discountable?: boolean;
            discounts?: string[];
            /** @example ii_1NpVh0QQTaDeHd2tmqwlLPwv */
            invoice_item?: string;
            /** @example true */
            livemode?: boolean;
            metadata?: Record<string, never>;
            period?: {
              /**
               * Format: int32
               * @example 1713962996
               */
              end?: number;
              /**
               * Format: int32
               * @example 1694521666
               */
              start?: number;
            };
            plan?: {
              /** @example plan_NkBTWal7D8noOb */
              id?: string;
              /** @example plan */
              object?: string;
              /** @example true */
              active?: boolean;
              /** Format: nullable */
              aggregate_usage?: string;
              /**
               * Format: int32
               * @example 99
               */
              amount?: number;
              /** @example 99 */
              amount_decimal?: string;
              /** @example per_unit */
              billing_scheme?: string;
              /**
               * Format: int32
               * @example 1681934120
               */
              created?: number;
              /** @example usd */
              currency?: string;
              /** @example year */
              interval?: string;
              /**
               * Format: int32
               * @example 1
               */
              interval_count?: number;
              /** @example true */
              livemode?: boolean;
              metadata?: Record<string, never>;
              /** @example Pro */
              nickname?: string;
              /** @example prod_NkBLSrAcR0yFKA */
              product?: string;
              /** Format: nullable */
              tiers_mode?: string;
              /** Format: nullable */
              transform_usage?: string;
              /** Format: nullable */
              trial_period_days?: string;
              /** @example licensed */
              usage_type?: string;
            };
            price?: {
              /** @example plan_NkBTWal7D8noOb */
              id?: string;
              /** @example price */
              object?: string;
              /** @example true */
              active?: boolean;
              /** @example per_unit */
              billing_scheme?: string;
              /**
               * Format: int32
               * @example 1681934120
               */
              created?: number;
              /** @example usd */
              currency?: string;
              /** Format: nullable */
              custom_unit_amount?: string;
              /** @example true */
              livemode?: boolean;
              /** Format: nullable */
              lookup_key?: string;
              metadata?: Record<string, never>;
              /** @example Pro */
              nickname?: string;
              /** @example prod_NkBLSrAcR0yFKA */
              product?: string;
              recurring?: {
                /** Format: nullable */
                aggregate_usage?: string;
                /** @example year */
                interval?: string;
                /**
                 * Format: int32
                 * @example 1
                 */
                interval_count?: number;
                /** Format: nullable */
                trial_period_days?: string;
                /** @example licensed */
                usage_type?: string;
              };
              /** @example unspecified */
              tax_behavior?: string;
              /** Format: nullable */
              tiers_mode?: string;
              /** Format: nullable */
              transform_quantity?: string;
              /** @example recurring */
              type?: string;
              /**
               * Format: int32
               * @example 99
               */
              unit_amount?: number;
              /** @example 99 */
              unit_amount_decimal?: string;
            };
            /** @example true */
            proration?: boolean;
            proration_details?: {
              credited_items?: {
                /** @example in_xxxx */
                invoice?: string;
                invoice_line_items?: string[];
              };
            };
            /**
             * Format: int32
             * @example 1
             */
            quantity?: number;
            /** @example sub_xxxx */
            subscription?: string;
            /** @example si_NlwjmwWIcCnR0r */
            subscription_item?: string;
            tax_amounts?: string[];
            tax_rates?: string[];
            /** @example invoiceitem */
            type?: string;
            /** @example -61 */
            unit_amount_excluding_tax?: string;
          }[];
          /** @example false */
          has_more?: boolean;
          /**
           * Format: int32
           * @example 3
           */
          total_count?: number;
          /** @example /v1/invoices/in_xxxx/lines */
          url?: string;
        };
        /** @example true */
        livemode?: boolean;
        metadata?: Record<string, never>;
        /** Format: nullable */
        next_payment_attempt?: string;
        /** @example C29E5E45-0014 */
        number?: string;
        /** Format: nullable */
        on_behalf_of?: string;
        /** @example true */
        paid?: boolean;
        /** @example false */
        paid_out_of_band?: boolean;
        /** Format: nullable */
        payment_intent?: string;
        payment_settings?: {
          /** Format: nullable */
          default_mandate?: string;
          /** Format: nullable */
          payment_method_options?: string;
          /** Format: nullable */
          payment_method_types?: string;
        };
        /**
         * Format: int32
         * @example 1694521666
         */
        period_end?: number;
        /**
         * Format: int32
         * @example 1682340596
         */
        period_start?: number;
        /**
         * Format: int32
         * @example 0
         */
        post_payment_credit_notes_amount?: number;
        /**
         * Format: int32
         * @example 0
         */
        pre_payment_credit_notes_amount?: number;
        /** Format: nullable */
        quote?: string;
        /** Format: nullable */
        receipt_number?: string;
        /** Format: nullable */
        rendering?: string;
        /** Format: nullable */
        rendering_options?: string;
        /** Format: nullable */
        shipping_cost?: string;
        /** Format: nullable */
        shipping_details?: string;
        /**
         * Format: int32
         * @example 0
         */
        starting_balance?: number;
        /** Format: nullable */
        statement_descriptor?: string;
        /** @example paid */
        status?: string;
        status_transitions?: {
          /**
           * Format: int32
           * @example 1694525662
           */
          finalized_at?: number;
          /** Format: nullable */
          marked_uncollectible_at?: string;
          /**
           * Format: int32
           * @example 1694525662
           */
          paid_at?: number;
          /** Format: nullable */
          voided_at?: string;
        };
        /** @example sub_xxxx */
        subscription?: string;
        subscription_details?: {
          metadata?: {
            /** @example user_2OsDX3m32lz850HSrdWurEVZkmU */
            granteeId?: string;
            /** @example example-member-123 */
            member?: string;
          };
        };
        /**
         * Format: int32
         * @example -11
         */
        subtotal?: number;
        /**
         * Format: int32
         * @example -11
         */
        subtotal_excluding_tax?: number;
        /** Format: nullable */
        tax?: string;
        /** Format: nullable */
        test_clock?: string;
        /**
         * Format: int32
         * @example -11
         */
        total?: number;
        total_discount_amounts?: string[];
        /**
         * Format: int32
         * @example -11
         */
        total_excluding_tax?: number;
        total_tax_amounts?: string[];
        /** Format: nullable */
        transfer_data?: string;
        /**
         * Format: int32
         * @example 1694521667
         */
        webhooks_delivered_at?: number;
      }[];
    };
    SubscriptionUpdatablePlan: {
      /** Format: uuid */
      uuid?: string;
      name?: string;
      description?: string;
      displayName?: string;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?:
        | 'ACTIVE'
        | 'CANCELED'
        | 'PAUSED'
        | 'TRIALING'
        | 'DELETED'
        | 'PAST_DUE'
        | 'INCOMPLETE_EXPIRED'
        | 'INCOMPLETE'
        | 'UNPAID';
      isTest?: boolean;
      trialDays?: number;
      evaluation?: boolean;
      evalDays?: number;
      organisation?: string;
      visibility?: string;
      licenseType?: string;
      perSeatAmount?: number;
      interval?: string;
      length?: number;
      active?: boolean;
      planType?: string;
      pricingType?: string;
      environment?: string;
      paddlePlanId?: string | null;
      /** Format: uuid */
      productUuid?: string;
      salablePlan?: boolean;
      /** Format: date-time */
      updatedAt?: string;
      currencies?: components['schemas']['PlanCurrency'][];
      features?: components['schemas']['PlanFeature'][];
    };
    PricingTable: {
      /** Format: uuid */
      uuid?: string;
      /** @example xxxxx */
      name?: string;
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status?: 'ACTIVE' | 'DEPRECATED';
      /** Format: nullable */
      title?: string;
      /** Format: nullable */
      text?: string;
      /** @example light */
      theme?: string;
      /** @example default */
      featureOrder?: string;
      /** Format: uuid */
      productUuid?: string;
      /** Format: nullable */
      customTheme?: string;
      /** Format: uuid */
      featuredPlanUuid?: string | null;
      /**
       * Format: date-time
       * @example "2023-10-03T09:50:57.308Z"
       */
      updatedAt?: string;
      features?: {
        /** Format: uuid */
        pricingTableUuid?: string;
        /** Format: uuid */
        featureUuid?: string;
        /**
         * Format: int32
         * @example 0
         */
        sortOrder?: number;
        /**
         * Format: date-time
         * @example "2023-10-03T09:50:57.308Z"
         */
        updatedAt?: string;
        feature?: {
          /** Format: uuid */
          uuid?: string;
          /** @example feature one */
          name?: string;
          /** @example Feature description */
          description?: string;
          /** @example Boolean Feature Display Name */
          displayName?: string;
          /** @example feature_one */
          variableName?: string;
          /**
           * @example ACTIVE
           * @enum {string}
           */
          status?: 'ACTIVE' | 'DEPRECATED';
          /** @example public */
          visibility?: string;
          /** @example boolean */
          valueType?: string;
          /** @example false */
          defaultValue?: string;
          /** @example false */
          showUnlimited?: boolean;
          /** Format: uuid */
          productUuid?: string;
          /**
           * Format: date-time
           * @example "2023-10-03T09:50:54.288Z"
           */
          updatedAt?: string;
          /**
           * Format: int32
           * @example 0
           */
          sortOrder?: number;
          featureEnumOptions?: {
            /** Format: uuid */
            uuid?: string;
            /** @example xxxxx */
            name?: string;
            /** Format: uuid */
            featureUuid?: string;
            /**
             * Format: date-time
             * @example "2023-10-03T09:50:56.422Z"
             */
            updatedAt?: string;
          }[];
        };
      }[];
      product?: {
        /** Format: uuid */
        uuid?: string;
        /** @example Sample Product */
        name?: string;
        /** @example This is a sample product for testing purposes */
        description?: string;
        /** @example https://example.com/logo.png */
        logoUrl?: string;
        /** @example Sample Product */
        displayName?: string;
        /** @example test-org */
        organisation?: string;
        /**
         * @example ACTIVE
         * @enum {string}
         */
        status?: 'ACTIVE' | 'DEPRECATED';
        /** @example false */
        paid?: boolean;
        /** Format: uuid */
        organisationPaymentIntegrationUuid?: string;
        /** Format: nullable */
        paymentIntegrationProductId?: string;
        /** @example CUSTOM */
        appType?: string;
        /**
         * Format: date-time
         * @example "2023-10-03T09:50:54.288Z"
         */
        updatedAt?: string;
        /** @example false */
        isTest?: boolean;
        features?: {
          /** Format: uuid */
          uuid?: string;
          /** @example feature one */
          name?: string;
          /** @example Feature description */
          description?: string;
          /** @example Boolean Feature Display Name */
          displayName?: string;
          /** @example feature_one */
          variableName?: string;
          /**
           * @example ACTIVE
           * @enum {string}
           */
          status?: 'ACTIVE' | 'DEPRECATED';
          /** @example public */
          visibility?: string;
          /** @example boolean */
          valueType?: string;
          /** @example false */
          defaultValue?: string;
          /** @example false */
          showUnlimited?: boolean;
          /** Format: uuid */
          productUuid?: string;
          /**
           * Format: date-time
           * @example "2023-10-03T09:50:54.288Z"
           */
          updatedAt?: string;
          /**
           * Format: int32
           * @example 0
           */
          sortOrder?: number;
          featureEnumOptions?: {
            /** Format: uuid */
            uuid?: string;
            /** @example xxxxx */
            name?: string;
            /** Format: uuid */
            featureUuid?: string;
            /**
             * Format: date-time
             * @example "2023-10-03T09:50:56.422Z"
             */
            updatedAt?: string;
          }[];
        }[];
        currencies?: {
          /** Format: uuid */
          productUuid?: string;
          /** Format: uuid */
          currencyUuid?: string;
          /** @example true */
          defaultCurrency?: boolean;
          currency?: {
            /** Format: uuid */
            uuid?: string;
            /** @example GBP */
            shortName?: string;
            /** @example Pound Sterling */
            longName?: string;
            /** @example £ */
            symbol?: string;
          };
        }[];
        organisationPaymentIntegration?: {
          /** Format: uuid */
          uuid?: string;
          /** @example test-org */
          organisation?: string;
          /** @example salable */
          integrationName?: string;
          /** @example test-09afc36d-759d-498f-8f1e-0816c036d879 */
          accountName?: string;
          accountData?: Record<string, never>;
          /** @example acct_1Nx5FZGgBupIrq4E */
          accountId?: string;
          /**
           * Format: date-time
           * @example "2023-10-03T09:50:54.288Z"
           */
          updatedAt?: string;
          /** @example true */
          isTest?: boolean;
        };
      };
      plans?: {
        /** Format: uuid */
        planUuid?: string;
        /** Format: uuid */
        pricingTableUuid?: string;
        /**
         * Format: int32
         * @example 0
         */
        sortOrder?: number;
        /**
         * Format: date-time
         * @example "2023-10-03T09:50:57.308Z"
         */
        updatedAt?: string;
        plan?: {
          /** Format: uuid */
          uuid?: string;
          /** @example Free Plan Name */
          name?: string;
          /** @example Free Plan description */
          description?: string;
          /** @example Free Plan Display Name */
          displayName?: string;
          /**
           * @example ACTIVE
           * @enum {string}
           */
          status?:
            | 'ACTIVE'
            | 'DEPRECATED'
            | 'DRAFT'
            | 'REVISION'
            | 'SCHEDULED'
            | 'COMING_SOON';
          /** @example false */
          isTest?: boolean;
          /**
           * Format: int32
           * @example 7
           */
          trialDays?: number;
          /** @example false */
          evaluation?: boolean;
          /**
           * Format: int32
           * @example 14
           */
          evalDays?: number;
          /** @example test-org */
          organisation?: string;
          /** @example public */
          visibility?: string;
          /** @example licensed */
          licenseType?: string;
          /**
           * Format: int32
           * @example 1
           */
          perSeatAmount?: number;
          /** @example month */
          interval?: string;
          /**
           * Format: int32
           * @example 1
           */
          length?: number;
          /** @example true */
          active?: boolean;
          /** @example standard */
          planType?: string;
          /** @example paid */
          pricingType?: string;
          /** @example dev */
          environment?: string;
          /** Format: nullable */
          paddlePlanId?: string;
          /** Format: uuid */
          productUuid?: string;
          /** @example false */
          salablePlan?: boolean;
          /**
           * Format: date-time
           * @example "2023-10-03T09:50:55.253Z"
           */
          updatedAt?: string;
          capabilities?: {
            /** Format: uuid */
            planUuid?: string;
            /** Format: uuid */
            capabilityUuid?: string;
            /**
             * Format: date-time
             * @example "2023-10-03T09:50:57.155Z"
             */
            updatedAt?: string;
            capability?: {
              /** Format: uuid */
              uuid?: string;
              /** @example test_capability */
              name?: string;
              /** @example Capability description */
              description?: string;
              /**
               * @example ACTIVE
               * @enum {string}
               */
              status?: 'ACTIVE' | 'DEPRECATED';
              /** Format: uuid */
              productUuid?: string;
              /**
               * Format: date-time
               * @example "2023-10-03T09:50:54.288Z"
               */
              updatedAt?: string;
            };
          }[];
          features?: {
            /** Format: uuid */
            planUuid?: string;
            /** Format: uuid */
            featureUuid?: string;
            /** @example xxxxx */
            value?: string;
            /** Format: uuid */
            enumValueUuid?: string;
            /** @example false */
            isUnlimited?: boolean;
            /** @example true */
            isUsage?: boolean;
            /**
             * Format: int32
             * @example 10
             */
            pricePerUnit?: number;
            /**
             * Format: int32
             * @example 1
             */
            minUsage?: number;
            /**
             * Format: int32
             * @example 100
             */
            maxUsage?: number;
            /**
             * Format: date-time
             * @example "2023-10-03T09:50:55.253Z"
             */
            updatedAt?: string;
            feature?: {
              /** Format: uuid */
              uuid?: string;
              /** @example feature one */
              name?: string;
              /** @example Feature description */
              description?: string;
              /** @example Boolean Feature Display Name */
              displayName?: string;
              /** @example feature_one */
              variableName?: string;
              /**
               * @example ACTIVE
               * @enum {string}
               */
              status?: 'ACTIVE' | 'DEPRECATED';
              /** @example public */
              visibility?: string;
              /** @example boolean */
              valueType?: string;
              /** @example false */
              defaultValue?: string;
              /** @example false */
              showUnlimited?: boolean;
              /** Format: uuid */
              productUuid?: string;
              /**
               * Format: date-time
               * @example "2023-10-03T09:50:54.288Z"
               */
              updatedAt?: string;
              /**
               * Format: int32
               * @example 0
               */
              sortOrder?: number;
            };
            enumValue?: {
              /** Format: uuid */
              uuid?: string;
              /** @example xxxxx */
              name?: string;
              /** Format: uuid */
              featureUuid?: string;
              /**
               * Format: date-time
               * @example "2023-10-03T09:50:55.253Z"
               */
              updatedAt?: string;
            };
          }[];
          currencies?: {
            /** Format: uuid */
            planUuid?: string;
            /** Format: uuid */
            currencyUuid?: string;
            /**
             * Format: int32
             * @example 500
             */
            price?: number;
            /** @example plan_OkaQpjaIjoUVYz */
            paymentIntegrationPlanId?: string;
            currency?: {
              /** Format: uuid */
              uuid?: string;
              /** @example GBP */
              shortName?: string;
              /** @example Pound Sterling */
              longName?: string;
              /** @example £ */
              symbol?: string;
            };
          }[];
          /** @example https://checkout.stripe.com/c/pay/cs_test_a1uqF9KMJjE5qMRrSopuYnxHxp0nAN31YVpanqTFEeKfUQRob5gHxQd9GV#fid2cXdsdWBEZmZqcGtxJz8nZGZmcVo0S30wQ19CYkdwdUx3dDFAJyknZHVsTmB8Jz8ndW5acWB2cVowNE1GbE9uTjNmN2ZiYUJAcm9wZm1XVDxxM3RnQ31UXDB0QmRWU3Q1ZDJ3SG1uNk0wdmt1ZzFHQVFhVVZfc0ExT0p%2FdVZfdENhXGFyVmIwPXxmNXZuQmFJXzU1T25PQDFMVUMnKSdjd2poVmB3c2B3Jz9xd3BgKSdpZHxqcHFRfHVgJz8ndmxrYmlgWmxxYGgnKSdga2RnaWBVaWRmYG1qaWFgd3YnP3F3cGB4JSUl */
          checkoutUrl?: string;
        };
      }[];
    };
    Permission: {
      value?: string;
      type?: string;
      description?: string;
      dependencies?: string[];
    };
    PermissionCreateRequest: {
      value: string;
      type?: string;
      description?: string;
      dependencies?: string[];
    };
    PermissionUpdateRequest: {
      value?: string;
      type?: string;
      description?: string;
      dependencies?: string[];
    };
    Role: {
      name?: string;
      description?: string;
      permissions?: string[];
    };
    RoleCreateRequest: {
      name: string;
      description?: string;
      permissions?: string[];
    };
    RoleUpdateRequest: {
      name?: string;
      description?: string;
      permissions?: string[];
    };
    User: {
      id?: string;
      name?: string;
      role?: string;
      permissions?: string[];
    };
    UserCreateRequest: {
      id: string;
      name?: string;
      role?: string;
      permissions?: string[];
    };
    UserUpdateRequest: {
      id?: string;
      name?: string;
      role?: string;
      permissions?: string[];
    };
    StripePaymentMethod: {
      id?: string;
      object?: string;
      billing_details?: components['schemas']['StripeBillingDetails'];
      card?: components['schemas']['StripeCard'];
      created?: number;
      customer?: string;
      livemode?: boolean;
      metadata?: Record<string, never>;
      type?: string;
    };
    StripeBillingDetails: {
      address?: components['schemas']['StripeAddress'];
      email?: string;
      name?: string;
      phone?: string;
    };
    StripeAddress: {
      city?: string;
      country?: string;
      line1?: string;
      line2?: string;
      postal_code?: string;
      state?: string;
    };
    StripeCard: {
      brand?: string;
      checks?: components['schemas']['StripeChecks'];
      country?: string;
      exp_month?: number;
      exp_year?: number;
      fingerprint?: string;
      funding?: string;
      generated_from?: string;
      last4?: string;
      networks?: components['schemas']['StripeNetworks'];
      three_d_secure_usage?: components['schemas']['StripeThreeDSecureUsage'];
      wallet?: string;
    };
    StripeChecks: {
      address_line1_check?: string;
      address_postal_code_check?: string;
      cvc_check?: string;
    };
    StripeNetworks: {
      available?: string[];
      preferred?: string;
    };
    StripeThreeDSecureUsage: {
      supported?: boolean;
    };
  };
  responses: never;
  parameters: {
    /** @description The version of the api. */
    VersionHeader: 'v1';
    /** @description A unique key for idempotent requests */
    UniqueKey: string;
    /** @description The unique identifier for the product. */
    ProductUuidPathParam: string;
    /** @description The unique identifier for the product. */
    ProductUuidQueryParam: string;
    /** @description The unique identifier for the plan. */
    PlanUuidPathParam: string;
    /** @description The unique identifier for the subscription. */
    SubscriptionUuidPathParam: string;
    /** @description The unique identifier for the subscription. */
    SubscriptionUuidQueryParam: string;
    /** @description The unique identifier for the license. */
    LicenseUuidPathParam: string;
    /** @description The unique identifier for the pricingTable. */
    PricingTableUuidPathParam: string;
    /** @description An identifier for the owner of the license. */
    PurchaserQueryParam: string;
    /** @description The status of the licenses. */
    LicenseStatusQueryParam?:
      | 'active'
      | 'canceled'
      | 'evaluation'
      | 'scheduled'
      | 'trialing'
      | 'inactive';
    /** @description The number of days to add to the capabilitiesEndDates. Values of <=0 will return an error. */
    GraceQueryParam?: number;
    /** @description The unique identifier for the grantee. */
    GranteeIdPathParam: string;
    /** @description The unique identifier for the grantee. */
    GranteeIdQueryParam?: string;
    /** @description The unique identifier for the grantee. */
    GranteeIdQueryParamRequired: string;
    /** @description The unique identifier for the grantee for all plan checkouts links. */
    GlobalGranteeIdQueryParam: string;
    /**
     * @description Comma-separated unique identifiers of the grantees
     * @example 123,456
     */
    GranteeIdsQueryParam: string;
    /** @description The URL to send users to if they successfully complete a purchase. It must be an absolute URL. */
    SuccessUrlQueryParamRequired: string;
    /** @description The URL to send users to if they successfully complete a purchase of any plan. It must be an absolute URL. */
    GlobalSuccessUrlQueryParam: string;
    /** @description The URL to send users to if the transaction fails. It must be an absolute URL. */
    CancelUrlQueryParamRequired: string;
    /** @description The URL to send users to if the transaction fails for any plan purchase. It must be an absolute URL. */
    GlobalCancelUrlQueryParam: string;
    /** @description The ID of the member who will manage the license. */
    MemberQueryParamRequired: string;
    /** @description The URL to send users to if they successfully complete a purchase. It must be an absolute URL. */
    SuccessUrlQueryParam?: string;
    /** @description The URL to send users to if the transaction fails. It must be an absolute URL. */
    CancelUrlQueryParam?: string;
    /** @description The ID of the member who will manage the license. */
    MemberQueryParam?: string;
    /** @description Used to pre-fill the promo code in Stripe checkout, use the promo code ID from the Stripe dashboard. Customers cannot edit this field during checkout. If you prefer to allow customers to enter the promo code themselves, use allowPromoCode instead. */
    PromoCodeQueryParam?: string;
    /** @description Enables the promo code field in Stripe checkout. Cannot be used with promoCode. */
    AllowPromoCodeQueryParam?: true | false;
    /** @description Pre-fills the customer email in Stripe checkout */
    CustomerEmailQueryParam?: string;
    /** @description The ID of an existing customer in your payment integration. This will pre-fill the email, card details and postcode at checkout. */
    CustomerIdQueryParam?: string;
    /** @description Uses the currency short name e.g. USD, defaults to the default currency on the Product which the Plan is linked to. Currently only supported on payment integration type 'stripe_existing' */
    CurrencyQueryParam?: string;
    /** @description Automatically calculate tax on checkout based on customers location and your Stripe settings. */
    AutomaticTaxQueryParam?: string;
    /** @description Additional properties to expand the plan's relations as comma separated values eg `expand=currencies,features` */
    ExpandPlanQueryParam?: (
      | 'capabilities'
      | 'capabilities.capability'
      | 'features'
      | 'features.feature'
      | 'features.enumValue'
      | 'currencies'
      | 'currencies.currency'
      | 'generateCheckoutLink'
    )[];
    /** @description Additional properties to expand the product's relations as comma separated values eg `expand=plans,features` */
    ExpandProductQueryParams?: (
      | 'generateCheckoutLinks'
      | 'features'
      | 'features.featureEnumOptions'
      | 'capabilities'
      | 'currencies'
      | 'currencies.currency'
      | 'organisationPaymentIntegration'
      | 'plans'
      | 'plans.capabilities'
      | 'plans.features'
      | 'plans.features.feature'
      | 'plans.features.enumValue'
      | 'plans.currencies'
      | 'plans.currencies.currency'
    )[];
    /** @description Specify the resource fields to expand as comma separated values eg `expand=product,customer` */
    ExpandSubscriptionQueryParams?: (
      | 'product'
      | 'product.organisationPaymentIntegration'
      | 'product.currencies'
      | 'plan.currencies'
      | 'customer'
    )[];
    /** @description Decides when the subscription should be canceled, either now or at the end of the subscription period */
    CancelWhenQueryParam?: 'now' | 'end';
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get products
   * @description Retrieves a list of all products
   */
  getProducts: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    responses: {
      /** @description List of products */
      200: {
        content: {
          'application/json': components['schemas']['Product'][];
        };
      };
    };
  };
  /**
   * Get a product
   * @description Retrieves a specific product by its UUID.
   * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
   */
  getProductByUuid: {
    parameters: {
      query?: {
        expand?: components['parameters']['ExpandProductQueryParams'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        productUuid: components['parameters']['ProductUuidPathParam'];
      };
    };
    responses: {
      /** @description Returns the product */
      200: {
        content: {
          'application/json': components['schemas']['Product'];
        };
      };
    };
  };
  /**
   * Get all plans of a product
   * @description Retrieves all the plans associated with a specific product.
   * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
   */
  getProductPlans: {
    parameters: {
      query?: {
        expand?: components['parameters']['ExpandPlanQueryParam'];
        successUrl?: components['parameters']['SuccessUrlQueryParam'];
        cancelUrl?: components['parameters']['CancelUrlQueryParam'];
        granteeId?: components['parameters']['GranteeIdQueryParam'];
        member?: components['parameters']['MemberQueryParam'];
        promoCode?: components['parameters']['PromoCodeQueryParam'];
        allowPromoCode?: components['parameters']['AllowPromoCodeQueryParam'];
        customerEmail?: components['parameters']['CustomerEmailQueryParam'];
        customerId?: components['parameters']['CustomerIdQueryParam'];
        currency?: components['parameters']['CurrencyQueryParam'];
        automaticTax?: components['parameters']['AutomaticTaxQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        productUuid: components['parameters']['ProductUuidPathParam'];
      };
    };
    responses: {
      /** @description List of plans */
      200: {
        content: {
          'application/json': components['schemas']['Plan'][];
        };
      };
    };
  };
  /**
   * Get product pricing table
   * @description Retrieves the pricing table of a specific product.
   * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
   */
  getProductPricingTable: {
    parameters: {
      query: {
        globalSuccessUrl: components['parameters']['GlobalSuccessUrlQueryParam'];
        cancelUrl: components['parameters']['GlobalCancelUrlQueryParam'];
        globalGranteeId: components['parameters']['GlobalGranteeIdQueryParam'];
        member?: components['parameters']['MemberQueryParam'];
        promoCode?: components['parameters']['PromoCodeQueryParam'];
        allowPromoCode?: components['parameters']['AllowPromoCodeQueryParam'];
        customerEmail?: components['parameters']['CustomerEmailQueryParam'];
        customerId?: components['parameters']['CustomerIdQueryParam'];
        currency?: components['parameters']['CurrencyQueryParam'];
        automaticTax?: components['parameters']['AutomaticTaxQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        productUuid: components['parameters']['ProductUuidPathParam'];
      };
    };
    responses: {
      /** @description Returns a product object with pricing table details */
      200: {
        content: {
          'application/json': components['schemas']['ProductPricingTable'];
        };
      };
    };
  };
  /**
   * Get product features
   * @description Retrieve the list of features for a product
   */
  getProductFeatures: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        productUuid: components['parameters']['ProductUuidPathParam'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Feature'][];
        };
      };
    };
  };
  /**
   * Get product currencies
   * @description Retrieve the list of currencies for a product
   */
  getProductCurrencies: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        productUuid: components['parameters']['ProductUuidPathParam'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The UUID of the product
             */
            productUuid?: string;
            /**
             * Format: uuid
             * @description The UUID of the currency
             */
            currencyUuid?: string;
            /** @description Indicates if it is the default currency for the product */
            defaultCurrency?: boolean;
            currency?: components['schemas']['Currency'];
          }[];
        };
      };
    };
  };
  /**
   * Get product capabilities
   * @description Retrieve the list of capabilities for a product
   */
  getProductCapabilities: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        productUuid: components['parameters']['ProductUuidPathParam'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Capability'];
        };
      };
    };
  };
  /**
   * Get a plan
   * @description Retrieves information about a plan by its UUID.
   * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
   */
  getPlanByUuid: {
    parameters: {
      query?: {
        expand?: components['parameters']['ExpandPlanQueryParam'];
        successUrl?: components['parameters']['SuccessUrlQueryParam'];
        cancelUrl?: components['parameters']['CancelUrlQueryParam'];
        granteeId?: components['parameters']['GranteeIdQueryParam'];
        member?: components['parameters']['MemberQueryParam'];
        promoCode?: components['parameters']['PromoCodeQueryParam'];
        allowPromoCode?: components['parameters']['AllowPromoCodeQueryParam'];
        customerEmail?: components['parameters']['CustomerEmailQueryParam'];
        customerId?: components['parameters']['CustomerIdQueryParam'];
        currency?: components['parameters']['CurrencyQueryParam'];
        automaticTax?: components['parameters']['AutomaticTaxQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        planUuid: components['parameters']['PlanUuidPathParam'];
      };
    };
    responses: {
      /** @description Returns the plan information */
      200: {
        content: {
          'application/json': components['schemas']['Plan'];
        };
      };
    };
  };
  /**
   * Get plan features
   * @description Retrieve the list of features for a specific plan
   */
  getPlanFeatures: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        planUuid: components['parameters']['PlanUuidPathParam'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PlanFeature'][];
        };
      };
    };
  };
  /**
   * Get plan currencies
   * @description Retrieve the list of currencies for a specific plan
   */
  getPlanCurrencies: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        planUuid: components['parameters']['PlanUuidPathParam'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PlanCurrency'][];
        };
      };
    };
  };
  /**
   * Get a checkout link for a plan
   * @description Retrieves a checkout link for a specific plan. The checkout link can be used by customers to purchase the plan.
   */
  getPlanCheckoutLink: {
    parameters: {
      query: {
        successUrl: components['parameters']['SuccessUrlQueryParamRequired'];
        cancelUrl: components['parameters']['CancelUrlQueryParamRequired'];
        granteeId: components['parameters']['GranteeIdQueryParamRequired'];
        member: components['parameters']['MemberQueryParamRequired'];
        promoCode?: components['parameters']['PromoCodeQueryParam'];
        allowPromoCode?: components['parameters']['AllowPromoCodeQueryParam'];
        customerEmail?: components['parameters']['CustomerEmailQueryParam'];
        customerId?: components['parameters']['CustomerIdQueryParam'];
        currency?: components['parameters']['CurrencyQueryParam'];
        automaticTax?: components['parameters']['AutomaticTaxQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        planUuid: components['parameters']['PlanUuidPathParam'];
      };
    };
    responses: {
      /** @description Successfully retrieved the checkout link */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uri
             * @description The generated checkout link for the plan.
             */
            checkoutUrl?: string;
          };
        };
      };
    };
  };
  /**
   * Get plan capabilities
   * @description Retrieve the list of capabilities for a specific plan
   */
  getPlanCapabilities: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        planUuid: components['parameters']['PlanUuidPathParam'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PlanCapability'][];
        };
      };
    };
  };
  /**
   * Get licenses
   * @description Retrieves a list of all licenses.
   */
  getLicenses: {
    parameters: {
      query?: {
        status?: components['parameters']['LicenseStatusQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['License'][];
        };
      };
    };
  };
  /**
   * Batch update licenses
   * @description Performs a batch update of licenses.
   */
  updateLicenses: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** Format: uuid */
          uuid: string;
          /** @example granteeId_123 */
          granteeId: string | null;
        }[];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['License'][];
        };
      };
    };
  };
  /**
   * Create a license
   * @description Create one or many ad hoc Licenses to give the specified granteeIds access to features.
   */
  createLicense: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    requestBody: {
      content: {
        'application/json':
          | components['schemas']['LicenseCreateRequest']
          | components['schemas']['CreateManyLicensesRequest'];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json':
            | components['schemas']['License']
            | components['schemas']['License'][];
        };
      };
    };
  };
  /**
   * Get the count of licenses
   * @description Returns the count of all licenses including counts for assigned and unassigned licenses.
   */
  getLicensesCount: {
    parameters: {
      query: {
        subscriptionUuid: components['parameters']['SubscriptionUuidQueryParam'];
        status?: components['parameters']['LicenseStatusQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': components['schemas']['LicenseCount'];
        };
      };
    };
  };
  /**
   * Get a License
   * @description Fetch the details of a specific license using its UUID. If additional specific details are required, use the optional 'expand' query parameter to include relational data such as associated subscription details, pricing plans, product details, etc.
   */
  getLicenseByUuid: {
    parameters: {
      query?: {
        /**
         * @description Specify the resource fields to expand as comma separated values eg `expand=subscription,plan`
         * @example [
         *   "subscription",
         *   "plan.currencies.currency",
         *   "plan.currencies",
         *   "plan.features",
         *   "plan",
         *   "product.currencies",
         *   "product.organisationPaymentIntegration",
         *   "product"
         * ]
         */
        expand?: string[];
      };
      path: {
        licenseUuid: components['parameters']['LicenseUuidPathParam'];
      };
    };
    responses: {
      /** @description The operation was successful, and the license data is returned in the response. */
      200: {
        content: {
          'application/json': components['schemas']['License'];
        };
      };
    };
  };
  /**
   * Update a license
   * @description Set or unset the granteeId of a license.
   */
  updateLicense: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        licenseUuid: components['parameters']['LicenseUuidPathParam'];
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "granteeId": "123456_updated"
         * }
         */
        'application/json': {
          /** @example 123456_updated */
          granteeId: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['License'];
        };
      };
    };
  };
  /**
   * Cancel an ad hoc License
   * @description Cancel an ad hoc license, this will set the status to `CANCELED`
   *
   * Does not cancel subscription, only use for canceling ad hoc licenses.
   */
  cancelLicense: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        licenseUuid: components['parameters']['LicenseUuidPathParam'];
      };
    };
    responses: {
      /** @description Successfully canceled the license, no content returned */
      204: {
        content: never;
      };
    };
  };
  /**
   * Check a grantee(s) licenses
   * @description Retrieves the flags the grantee(s) have access to.
   */
  getLicenseCheck: {
    parameters: {
      query: {
        granteeIds: components['parameters']['GranteeIdsQueryParam'];
        productUuid: components['parameters']['ProductUuidQueryParam'];
        grace?: components['parameters']['GraceQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['LicenseCheck'];
        };
      };
    };
  };
  /**
   * Get licenses by purchaser
   * @description Retrieves an array of licenses for a purchaser
   */
  getLicensesByPurchaser: {
    parameters: {
      query: {
        productUuid: components['parameters']['ProductUuidQueryParam'];
        status?: components['parameters']['LicenseStatusQueryParam'];
        purchaser: components['parameters']['PurchaserQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    responses: {
      /** @description An array of licenses for a specific purchaser */
      200: {
        content: {
          'application/json': components['schemas']['LicenseByPurchaser'][];
        };
      };
    };
  };
  /**
   * Get licenses by granteeId
   * @description Retrieves a list of licenses for a grantee
   */
  getLicensesByGranteeId: {
    parameters: {
      query?: {
        /** @description Parameters to expand in the response */
        expand?: (
          | 'subscription'
          | 'plan.currencies.currency'
          | 'plan.currencies'
          | 'plan.features'
          | 'plan'
          | 'product.currencies'
          | 'product.organisationPaymentIntegration'
          | 'product'
        )[];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        granteeId: components['parameters']['GranteeIdPathParam'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['License'][];
        };
      };
    };
  };
  /**
   * Get usage details of a license
   * @description Retrieves the feature usage details for a metered license.
   */
  getLicenseUsage: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        licenseUuid: components['parameters']['LicenseUuidPathParam'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['LicenseUsage'][];
        };
      };
    };
  };
  /**
   * Cancel many ad hoc licenses
   * @description Cancels ad hoc Licenses with using an array of licenseUuids.
   *
   * Does not cancel subscription, only use for canceling ad hoc licenses.
   */
  cancelLicenses: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "uuids": [
         *     "674e7460-8eea-48b1-a795-2705d0e38ff4",
         *     "eb6424b2-4cb3-4812-85a4-25acab877109"
         *   ]
         * }
         */
        'application/json': {
          /** @description UUIDs of the Licenses which are being canceled */
          uuids?: string[];
        };
      };
    };
    responses: {
      /** @description Successfully canceled licenses, no content returned */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get a subscription
   * @description Retrieves the subscription data based on the UUID.
   * By default, the response does not contain any relational data. If you want to expand the relational data, you can do so with the `expand` query parameter.
   */
  getSubscriptionByUuid: {
    parameters: {
      query?: {
        expand?: components['parameters']['ExpandSubscriptionQueryParams'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    responses: {
      /** @description The subscription data */
      200: {
        content: {
          'application/json': components['schemas']['Subscription'];
        };
      };
    };
  };
  /**
   * Get subscription invoices
   * @description Retrieves a list of invoices for a subscription
   */
  getSubscriptionInvoices: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    responses: {
      /** @description Paginated invoices */
      200: {
        content: {
          'application/json': components['schemas']['StripeInvoice'];
        };
      };
    };
  };
  /**
   * Get plans that a subscribed user can switch to
   * @description Retrieves a list of available plans that a subscribed user can switch to
   */
  getSubscriptionUpdatablePlans: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    responses: {
      /** @description List of plans that a subscribed user can switch to */
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionUpdatablePlan'][];
        };
      };
    };
  };
  /**
   * Cancel a subscription
   * @description Cancels a subscription by providing the `subscriptionUuid`
   * It will cancel immediately or at the end of the Subscription based on value of the `when` query parameter.
   */
  cancelSubscription: {
    parameters: {
      query?: {
        when?: components['parameters']['CancelWhenQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    responses: {
      /** @description The subscription was canceled successfully. */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get an update payment link
   * @description Retrieves the update payment link for a specific subscription.
   * The link opens up a management portal for your payment integration that will have an option for the customer to update their payment details.
   */
  getSubscriptionUpdatePaymentLink: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    responses: {
      /** @description Retrieves the stripe update payment link. */
      200: {
        content: {
          'application/json': {
            /**
             * @description The URL to update payment information
             * @example https://billing.stripe.com/p/session/test_YWNjdF8xS3RZbjhBNG4yM0FDU2oyLF9OeFpRRXB6SDVRRlZwQmIzY2ZTdHhmRnZBVWs1V2pj0100qMzar5GE
             */
            url?: string;
          };
        };
      };
    };
  };
  /**
   * Get a customer portal link
   * @description Retrieves the customer portal link for a subscription.
   * The link opens up a subscription management portal for your payment integration that will have an options for the customer to manage their subscription.
   */
  getSubscriptionCustomerPortalLink: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    responses: {
      /** @description Returns the Stripe customer portal link. */
      200: {
        content: {
          'application/json': {
            /**
             * @description The URL of the customer portal.
             * @example https://billing.stripe.com/p/session/test_YWNjdF8xS3RZbjhBNG4yM0FDU2oyLF9OeGFlTkJvU2QxbHNnZWJKd3U3RmpleUt2N0tuRWIx0100HscSOCYZ
             */
            url?: string;
          };
        };
      };
    };
  };
  /**
   * Get a cancel subscription link
   * @description Retrieves the cancel subscription link for a specific subscription.
   * The link opens up a subscription management portal for your payment integration that will have an option for the customer to cancel the subscription.
   */
  getSubscriptionCancelLink: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    responses: {
      /** @description Retrieves the cancel subscription link successfully. */
      200: {
        content: {
          'application/json': {
            /**
             * @description The cancel subscription link.
             * @example https://billing.stripe.com/p/session/test_YWNjdF8xS3RZbjhBNG4yM0FDU2oyLF9OeFpRRXB6SDVRRlZwQmIzY2ZTdHhmRnZBVWs1V2pj0100qMzar5GE
             */
            url?: string;
          };
        };
      };
    };
  };
  /**
   * Get payment method
   * @description Retrieves the payment method used to pay for a subscription.
   */
  getSubscriptionPaymentMethod: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    responses: {
      /** @description Retrieves the payment method successfully. */
      200: {
        content: {
          'application/json': components['schemas']['StripePaymentMethod'];
        };
      };
    };
  };
  /**
   * Reactivate a Subscription
   * @description Reactivate a Subscription's scheduled cancellation before the billing period has passed. If the billing period has passed and the Subscription has already been canceled please create a new Subscription.
   */
  getSubscriptionReactivate: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    responses: {
      /** @description Successfully reactivated the subscription. */
      204: {
        content: never;
      };
    };
  };
  /**
   * Move a Subscription to another Plan
   * @description Moves a subscription to a different plan. Allows users to change the plan for a subscription.
   */
  updateSubscriptionPlan: {
    parameters: {
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
        planUuid: components['parameters']['PlanUuidPathParam'];
      };
    };
    responses: {
      /** @description Subscription moved successfully to another plan */
      200: {
        content: never;
      };
    };
  };
  /**
   * Decrement quantity of seats on a subscription.
   * @description Decrementing will only remove unassigned licenses.
   */
  decrementSubscriptionSeats: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The number of seats to decrement. */
          decrement: number;
        };
      };
    };
    responses: {
      /** @description The seats have been successfully decremented. */
      204: {
        content: never;
      };
    };
  };
  /**
   * Increment quantity of seats on a subscription.
   * @description Incrementing will create unassigned licenses.
   */
  incrementSubscriptionSeats: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        subscriptionUuid: components['parameters']['SubscriptionUuidPathParam'];
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /** @description The number of seats to increment. */
          increment: number;
        };
      };
    };
    responses: {
      /** @description The seats have been successfully incremented. */
      200: {
        content: {
          'application/json': components['schemas']['License'][];
        };
      };
    };
  };
  /**
   * Updates a license's usage
   * @description Updates the usage feature of a license by incrementing its value.
   */
  updateLicenseUsage: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
        uniqueKey: components['parameters']['UniqueKey'];
      };
    };
    requestBody: {
      content: {
        'application/json': {
          /**
           * Format: uuid
           * @description The UUID of the license.
           */
          licenseUuid: string;
          /** @description The name of the feature variable. */
          featureVariableName: string;
          countOptions: {
            /** @description The value to increment the usage feature by. */
            increment: number;
          };
        };
      };
    };
    responses: {
      /** @description Successfully updated. */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get a pricing table
   * @description Retrieves a pricing table by its UUID. This returns all necessary data on a Pricing Table to be able to display it.
   */
  getPricingTableByUuid: {
    parameters: {
      query: {
        globalSuccessUrl: components['parameters']['GlobalSuccessUrlQueryParam'];
        cancelUrl: components['parameters']['GlobalCancelUrlQueryParam'];
        globalGranteeId: components['parameters']['GlobalGranteeIdQueryParam'];
        member: components['parameters']['MemberQueryParamRequired'];
        promoCode?: components['parameters']['PromoCodeQueryParam'];
        allowPromoCode?: components['parameters']['AllowPromoCodeQueryParam'];
        customerEmail?: components['parameters']['CustomerEmailQueryParam'];
        customerId?: components['parameters']['CustomerIdQueryParam'];
        currency?: components['parameters']['CurrencyQueryParam'];
        automaticTax?: components['parameters']['AutomaticTaxQueryParam'];
      };
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        pricingTableUuid: components['parameters']['PricingTableUuidPathParam'];
      };
    };
    responses: {
      /** @description Successfully retrieved the specified pricing table */
      200: {
        content: {
          'application/json': components['schemas']['PricingTable'];
        };
      };
    };
  };
  /**
   * Get list of permissions
   * @description Retrieves the list of RBAC permissions
   */
  getPermissions: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    responses: {
      /** @description List of RBAC permissions */
      200: {
        content: {
          'application/json': components['schemas']['Permission'][];
        };
      };
    };
  };
  /**
   * Create new RBAC permission
   * @description Creates a new RBAC permission that can be assigned to a user or role
   */
  createPermission: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PermissionCreateRequest'];
      };
    };
    responses: {
      /** @description The created RBAC permission */
      200: {
        content: {
          'application/json': components['schemas']['Permission'];
        };
      };
    };
  };
  /**
   * Get permission by UUID
   * @description Retrieves the RBAC permission with the specified UUID.
   */
  getPermissionByUuid: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC permission. */
        permissionUuid: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Permission'];
        };
      };
    };
  };
  /**
   * Update permission by UUID
   * @description Updates the RBAC permission with the specified UUID.
   */
  updatePermission: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC permission. */
        permissionUuid: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['PermissionUpdateRequest'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Permission'];
        };
      };
    };
  };
  /**
   * Delete permission by UUID
   * @description Deletes the RBAC permission with the specified UUID.
   */
  deletePermission: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC permission. */
        permissionUuid: string;
      };
    };
    responses: {
      /** @description Successfully deleted, no content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get list of roles
   * @description Retrieves the list of RBAC roles
   */
  getRoles: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    responses: {
      /** @description List of roles */
      200: {
        content: {
          'application/json': components['schemas']['Role'][];
        };
      };
    };
  };
  /**
   * Create new role
   * @description Creates a new RBAC role that can be assigned to a user
   */
  createRole: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['RoleCreateRequest'];
      };
    };
    responses: {
      /** @description The created role */
      200: {
        content: {
          'application/json': components['schemas']['Role'];
        };
      };
    };
  };
  /**
   * Get role by UUID
   * @description Retrieves the RBAC role by its UUID.
   */
  getRoleByUuid: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC role. */
        roleUuid: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Role'];
        };
      };
    };
  };
  /**
   * Update role by UUID
   * @description Updates the RBAC role by its UUID.
   */
  updateRole: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC role. */
        roleUuid: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['RoleUpdateRequest'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Role'];
        };
      };
    };
  };
  /**
   * Delete role by UUID
   * @description Deletes the RBAC role by its UUID.
   */
  deleteRole: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC role. */
        roleUuid: string;
      };
    };
    responses: {
      /** @description Successfully deleted, no content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Get list of users
   * @description Retrieves a list of all users
   */
  getUsers: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['User'][];
        };
      };
    };
  };
  /**
   * Create new user
   * @description Creates a new user with the provided data
   */
  createUser: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserCreateRequest'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
    };
  };
  /**
   * Get user by UUID
   * @description Retrieves the RBAC Users with the specified UUID.
   */
  getUserByUuid: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC user. */
        userUuid: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
    };
  };
  /**
   * Update user by UUID
   * @description Updates the RBAC Users with the specified UUID.
   */
  updateUser: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC user. */
        userUuid: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserUpdateRequest'];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
    };
  };
  /**
   * Delete user by UUID
   * @description Deletes the RBAC Users with the specified UUID.
   */
  deleteUser: {
    parameters: {
      header: {
        version: components['parameters']['VersionHeader'];
      };
      path: {
        /** @description The unique identifier for the RBAC user. */
        userUuid: string;
      };
    };
    responses: {
      /** @description Successfully deleted, no content */
      204: {
        content: never;
      };
    };
  };
}
